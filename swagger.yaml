openapi: 3.0.0
info:
  title: AluraFlix API
  version: 1.0.0
  description: API RESTful para vídeos, categorias e usuários (admin, docente, aluno)
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Usuario:
      type: object
      properties:
        username:
          type: string
        senha:
          type: string
        role:
          type: string
          enum: [admin, docente, aluno]
        ativo:
          type: boolean
    Categoria:
      type: object
      properties:
        nome:
          type: string
        cor:
          type: string
    Video:
      type: object
      properties:
        titulo:
          type: string
        descricao:
          type: string
        url:
          type: string
        categoria:
          type: string
        tags:
          type: array
          items:
            type: string
          description: 'Exemplo: ["gratuito"]'

paths:
  /cadastro:
    post:
      summary: Cadastro de usuário (sempre aluno)
      tags: [Usuários]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuário criado com sucesso
        '400':
          description: Erro de validação

  /login:
    post:
      summary: Login de usuário
      tags: [Usuários]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Token JWT retornado
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Usuário e senha inválidos
        '403':
          description: Usuário inativado, por favor entre em contato com um de nossos colaboradores.

  /usuarios/avancado:
    post:
      summary: Criação de usuário admin/docente (apenas admin)
      tags: [Usuários]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuário criado com sucesso
        '400':
          description: Role inválida
        '403':
          description: Acesso negado

  /usuarios:
    get:
      summary: Lista usuários (apenas admin, filtro ativo/inativo)
      tags: [Usuários]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: ativo
          schema: { type: boolean }
      responses:
        '200':
          description: Lista de usuários

  /usuarios/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    put:
      summary: Atualiza usuário (próprio ou admin)
      tags: [Usuários]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '200':
          description: Usuário atualizado
    patch:
      summary: Inativa usuário (soft delete, próprio ou admin)
      tags: [Usuários]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Usuário inativado

  /usuarios/{id}/reativar:
    patch:
      summary: Reativa usuário (admin ou próprio usuário)
      tags: [Usuários]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário reativado com sucesso
        '403':
          description: Acesso negado
        '404':
          description: Usuário não encontrado
        '400':
          description: Usuário já está ativo

  /categorias:
    get:
      summary: Lista categorias (paginado)
      tags: [Categorias]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200':
          description: Lista paginada de categorias
    post:
      summary: Cria categoria (admin/docente)
      tags: [Categorias]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categoria'
      responses:
        '201':
          description: Categoria criada

  /categorias/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Busca categoria por ID
      tags: [Categorias]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categoria encontrada
    put:
      summary: Atualiza categoria (admin/docente)
      tags: [Categorias]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categoria'
      responses:
        '200':
          description: Categoria atualizada
    delete:
      summary: Deleta categoria (apenas admin)
      tags: [Categorias]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Categoria deletada

  /categorias/busca:
    get:
      summary: Busca categorias por nome (não diferencia acentuação)
      tags: [Categorias]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: nome
          schema: { type: string }
      responses:
        '200':
          description: Lista de categorias

  /videos:
    get:
      summary: Lista vídeos (paginado)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200':
          description: Lista paginada de vídeos
    post:
      summary: Cria vídeo (admin/docente)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '201':
          description: Vídeo criado

  /videos/gratis:
    get:
      summary: Lista vídeos gratuitos (público, paginado)
      tags: [Vídeos]
      parameters:
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer }
      responses:
        '200':
          description: Lista de vídeos gratuitos

  /videos/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Busca vídeo por ID
      tags: [Vídeos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Vídeo encontrado
    put:
      summary: Atualiza vídeo (admin/docente)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      responses:
        '200':
          description: Vídeo atualizado
    delete:
      summary: Deleta vídeo (apenas admin)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Vídeo deletado

  /videos/busca:
    get:
      summary: Busca vídeos por título (não diferencia acentuação)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: titulo
          schema: { type: string }
      responses:
        '200':
          description: Lista de vídeos

  /videos/categorias/id/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Lista vídeos por categoria (ID)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de vídeos

  /videos/categorias/nome/{categoria}:
    parameters:
      - name: categoria
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Lista vídeos por categoria (nome)
      tags: [Vídeos]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de vídeos
